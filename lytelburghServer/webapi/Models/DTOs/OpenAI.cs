using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Serialization;
using Newtonsoft.Json.Schema;
using YamlDotNet.Core.Tokens;


/// <summary>
/// <a href="https://platform.openai.com/docs/api-reference/chat/create"/>
/// </summary>
public class OpenAICompletionRequest
{

    public OpenAICompletionRequest(IList<Message> messages)
    {
        Messages = messages;
    }

    /// <summary>
    /// ID of the model to use. See the model endpoint compatibility table for details on which models work with the Chat API.
    /// </summary>
    /// <example>gpt-3.5-turbo</example>
    public string Model { get; set; } = "gpt-3.5-turbo";
    /// <summary>
    /// A list of messages comprising the conversation so far.
    /// </summary>
    public IList<Message> Messages { get; set; }

    /// <summary>
    /// A list of functions the model may generate JSON inputs for.
    /// </summary>

    public IList<Function>? Functions { get; set; }

    /// <summary>
    /// Controls how the model calls functions. "none" means the model will not call a function and instead generates a message. "auto" means the model can pick between generating a message or calling a function. Specifying a particular function via {"name": "my_function"} forces the model to call that function. "none" is the default when no functions are present. "auto" is the default if functions are present.
    /// </summary>
    public Dictionary<string, string>? FunctionCall { get; set; }

    /// <summary>
    /// Defaults to 1
    /// <br></br>
    /// What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
    /// <br></br>
    /// <br></br>
    /// We generally recommend altering this or top_p but not both.
    /// 
    /// </summary>
    public double? Temperature { get; set; } = 0.7;

    /// <summary>
    /// Defaults to 1
    /// <br></br>
    /// An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
    /// <br></br>
    /// <br></br>
    /// We generally recommend altering this or temperature but not both.
    /// </summary>
    public double? TopP { get; set; }

    /// <summary>
    /// Defaults to 1
    /// <br></br>
    /// How many chat completion choices to generate for each input message.
    /// </summary>
    public uint? N { get; set; }

    /// <summary>
    /// Defaults to false
    /// <br></br>
    /// If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only server-sent events as they become available, with the stream terminated by a data: [DONE] message.
    ///</summary>
    public bool? Stream { get; set; }

    /// <summary>
    /// Defaults to null
    /// <br></br>
    /// Up to 4 sequences where the API will stop generating further tokens.
    ///</summary>
    public string[]? Stop { get; set; }


    /// <summary>
    /// Defaults to inf (whatever that means in JSON?)
    /// <br></br>
    /// The maximum number of tokens to generate in the chat completion.
    /// <br></br>
    /// <br></br>
    /// The total length of input tokens and generated tokens is limited by the model's context length
    ///</summary>
    public uint? MaxTokens { get; set; }

    /// <summary>
    /// Defaults to 0
    /// <br></br>
    /// Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.
    /// </summary>
    public double? PresencePenalty { get; set; }

    /// <summary>
    /// Defaults to 0
    /// <br></br>
    /// Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.
    /// </summary>
    public double? FrequencyPenalty { get; set; }

    /// <summary>
    /// Defaults to null
    /// <br></br>
    /// Modify the likelihood of specified tokens appearing in the completion.
    /// <br></br>
    /// <br></br>
    /// Accepts a json object that maps tokens(specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling.The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.
    /// </summary>
    public Dictionary<string, double>? LogitBias { get; set; }

    /// <summary>
    /// A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse
    /// </summary>
    public string? User { get; set; }


    public class Message
    {
        [JsonConverter(typeof(StringEnumConverter), typeof(SnakeCaseNamingStrategy))]
        public RoleEnum Role { get; private set; } = RoleEnum.User;
        public string Content { get; private set; }
        public Message(string content)
        {
            if (string.IsNullOrEmpty(content))
            {
                throw new ArgumentException("Content cannot be null or empty");
            }
            Content = content;
        }

        public enum RoleEnum
        {
            System,
            User,
            Assistant,
            Function

        }
    }

    public class Function
    {
        /// <summary>
        /// The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
        /// </summary>
        public string Name { get; set; }
        /// <summary>
        /// A description of what the function does, used by the model to choose when and how to call the function.
        /// </summary>
        public string? Description { get; set; }

        /// <summary>
        /// The parameters the functions accepts, described as a JSON Schema object.
        /// <br></br>
        /// <br></br>
        /// To describe a function that accepts no parameters, provide the value {"type": "object", "properties": { } }.
        /// </summary>
      
        [JsonIgnore]
        public JSchema Parameters { get; set; }

        /// <summary>
        /// Communicates to Newtonsoft JSON serializer and Swagger that the parameters JSON property is a string.
        /// Without this property, Newtonsoft tries to (de)serialize the parameters property as a json object.
        /// (Deserializes after coming from our client and serializes before going to OpenAI endpoint.)
        /// </summary>
        [JsonProperty("parameters")]
        public string ParametersJson
        {
            get => Parameters.ToString();
            set => Parameters = JSchema.Parse(value);
        }


        public Function(string name, string? description, JSchema parameters)
        {
            Name = name;
            Description = description;
            Parameters = parameters;

        }

        [JsonConstructor]
        public Function(string name, string? description, string parameters)
        {
            Name = name;
            Description = description;
            Parameters = JSchema.Parse(parameters);

        }
    }

}
/// <summary>
/// <a href="https://platform.openai.com/docs/api-reference/chat/object"/>
/// </summary>

// Json Serializer will set the null values, so they don't need set in the 
// constructor for the non-nullables
#nullable disable
public class OpenAICompletionResponse
{
    /// <summary>
    /// A unique identifier for the chat completion.
    /// </summary>
    [JsonProperty]
    public string Id { get; private set; }
    /// <summary>
    /// The object type, which is always chat.completion.
    /// </summary>
    [JsonProperty]
    public string Object { get; private set; }
    /// <summary>
    /// The Unix timestamp (in seconds) of when the chat completion was created.
    /// </summary>
    [JsonProperty]
    public long Created { get; private set; }
    /// <summary>
    /// The model used for the chat completion.
    /// </summary>
    [JsonProperty]
    public string Model { get; private set; }
    /// <summary>
    /// A list of chat completion choices. Can be more than one if n is greater than 1.
    /// </summary>
    [JsonProperty]
    public IList<Choice> Choices { get; private set; }

    public class Choice
    {
        /// <summary>
        /// The index of the choice in the list of choices.
        /// </summary>
        [JsonProperty]
        public int Index { get; private set; }
        /// <summary>
        /// A chat completion message generated by the model.
        /// </summary>
        [JsonProperty]
        public Message Message { get; private set; }

        /// <summary>
        /// The reason the model stopped generating tokens. This will be stop if the model hit a natural stop point or a provided stop sequence, length if the maximum number of tokens specified in the request was reached, content_filter if content was omitted due to a flag from our content filters, or function_call if the model called a function.
        /// </summary>
        [JsonProperty]
        [JsonConverter(typeof(StringEnumConverter), typeof(SnakeCaseNamingStrategy))]
        public FinishReasonEnum FinishReason { get; private set; }

        public enum FinishReasonEnum
        {
            Stop,
            Length,
            ContentFilter,
            FunctionCall

        }
    }
    [JsonProperty]
    public Usage usage { get; private set; }
    /// <summary>
    /// A chat completion message generated by the model.
    /// </summary>
    public class Message
    {
        /// <summary>
        /// The role of the author of this message.
        /// </summary>
        [JsonProperty]
        public string Role { get; private set; }
        /// <summary>
        /// The contents of the message.
        /// </summary>
        [JsonProperty]
        public string? Content { get; private set; }
        /// <summary>
        /// The name and arguments of a function that should be called, as generated by the model.
        /// </summary>
        public class FunctionCall
        {
            /// <summary>
            /// The name of the function to call.
            /// </summary>
            [JsonProperty]
            public string Name { get; private set; }
            /// <summary>
            /// The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
            /// </summary>
            [JsonProperty]
            public string Arguments { get; private set; }
        }
    }

    public class Usage
    {
        /// <summary>
        /// Number of tokens in the prompt.
        /// </summary>
        [JsonProperty]
        public int PromptTokens { get; private set; }
        /// <summary>
        /// Number of tokens in the generated completion.
        /// </summary>
        [JsonProperty]
        public int CompletionTokens { get; private set; }
        /// <summary>
        /// Total number of tokens used in the request (prompt + completion).
        /// </summary>
        [JsonProperty]
        public int TotalTokens { get; private set; }

    }

}


